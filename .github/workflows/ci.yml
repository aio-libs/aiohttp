name: CI

on:
  push:
    branches:
      - 'master'
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - 'master'
      - '[0-9].[0-9]+'
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.5
      with:
        submodules: true
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v2.1.6
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements/lint.txt
    - name: Install self
      run: |
        python -m pip install .
      env:
        AIOHTTP_NO_EXTENSIONS: 1
    - name: Run linters
      run: |
        make mypy
    - name: Install spell checker
      run: |
        sudo apt install libenchant-dev
        pip install -r requirements/doc-spelling.txt
    - name: Run docs spelling
      run: |
        # towncrier --yes  # uncomment me after publishing a release
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U build twine
        python -m build
      env:
        AIOHTTP_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check --strict dist/*
    - name: Making sure that CONTRIBUTORS.txt remains sorted
      run: |
        LC_ALL=C sort -c CONTRIBUTORS.txt

  test:
    name: Test
    needs: lint
    strategy:
      matrix:
        pyver: [3.7, 3.8, 3.9, '3.10']
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        exclude:
          - os: macos
            no-extensions: 'Y'
          - os: macos
            pyver: 3.7
          - os: macos
            pyver: 3.8
          - os: windows
            no-extensions: 'Y'
        # pypy 3.7 exists in beta and doesn't work well yet
        # include:
        #   - pyver: pypy3
        #     no-extensions: 'Y'
        #     os: ubuntu
      fail-fast: true
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 20
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.5
      with:
        submodules: true
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v2.1.6
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ matrix.no-extensions }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ matrix.no-extensions }}-
    - name: Upgrade wheel  # Needed for proxy.py install not to explode
      run: pip install -U wheel
    - name: Cythonize
      if: ${{ matrix.no-extensions == '' }}
      run: |
        make cythonize
    - name: Run unittests
      env:
        COLOR: 'yes'
        AIOHTTP_NO_EXTENSIONS: ${{ matrix.no-extensions }}
      run: |
        make vvtest
        python -m coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v2.1.0
      with:
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    needs: test
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Dummy
        run: |
            echo "Predeploy step"

  build-tarball:
    name: Tarball
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.5
    - name: Setup Python
      uses: actions/setup-python@v2.2.2
    - name: Install cython
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements/cython.txt
    - name: Cythonize
      run: |
        make cythonize
    - name: Make sdist
      run:
        python -m pip install build --user
        python -m build --sdist
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

  build-wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.qemu }}
    runs-on: ${{ matrix.os }}-latest
    needs: pre-deploy
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        qemu: ['']
        include:
          # Split ubuntu job for the sake of speed-up
        - os: ubuntu
          qemu: aarch64
        - os: ubuntu
          qemu: ppc64le
        - os: ubuntu
          qemu: s390x
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.5
    - name: Set up QEMU
      if: ${{ matrix.qemu }}
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all
      id: qemu
    - name: Prepare emulation
      run: |
        if [[ -n "${{ matrix.qemu }}" ]]; then
          # Build emulated architectures only if QEMU is set,
          # use default "auto" otherwise
          echo "CIBW_ARCHS_LINUX=${{ matrix.qemu }}" >> $GITHUB_ENV
        fi
      shell: bash
    - name: Setup Python
      uses: actions/setup-python@v2.2.2
    - name: Install cython
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements/cython.txt
    - name: Cythonize
      run: |
        make cythonize
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.2.2
      env:
        CIBW_ARCHS_MACOS: x86_64 arm64 universal2
    - uses: actions/upload-artifact@v2
      with:
        name: dist
        path: ./wheelhouse/*.whl

  deploy:
    name: Deploy
    environment: release
    needs: [build-tarball, build-wheels]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.5
    - name: Login
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    - name: Make Release
      uses: aio-libs/create-release@v1.2.2
      with:
        changes_file: CHANGES.rst
        name: aiohttp
        version_file: aiohttp/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_API_TOKEN }}
        artifact: dist
        fix_issue_regex: "`#(\\d+) <https://github.com/aio-libs/aiohttp/issues/\\1>`"
        fix_issue_repl: "(#\\1)"
