name: CI

on:
  push:
    branches:
      - 'master'
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - 'master'
      - '[0-9].[0-9]+'
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
      with:
        submodules: true
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v2.1.6
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements/lint.txt
    - name: Pre-Commit hooks
      uses: pre-commit/action@v2.0.3
    - name: Install itself
      run: |
        python setup.py install
      env:
        AIOHTTP_NO_EXTENSIONS: 1
    - name: Run linters
      run: |
        make mypy
    - name: Install spell checker
      run: |
        sudo apt install libenchant-dev
        pip install -r requirements/doc-spelling.txt
    - name: Run docs spelling
      run: |
        # towncrier --yes  # uncomment me after publishing a release
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
      env:
        AIOHTTP_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check dist/*
    - name: Making sure that CONTRIBUTORS.txt remains sorted
      run: |
        LC_ALL=C sort -c CONTRIBUTORS.txt

  test:
    name: Test
    needs: lint
    strategy:
      matrix:
        pyver: [3.7, 3.8, 3.9]
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        exclude:
          - os: macos
            no-extensions: 'Y'
          - os: macos
            pyver: 3.7
          - os: macos
            pyver: 3.8
          - os: windows
            no-extensions: 'Y'
        # pypy 3.7 exists in beta and doesn't work well yet
        # include:
        #   - pyver: pypy3
        #     no-extensions: 'Y'
        #     os: ubuntu
      fail-fast: true
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
      with:
        submodules: true
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v2.1.6
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ matrix.no-extensions }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ matrix.no-extensions }}-
    - name: Cythonize
      if: ${{ matrix.no-extensions == '' }}
      run: |
        make cythonize
    - name: Run unittests
      env:
        COLOR: 'yes'
        AIOHTTP_NO_EXTENSIONS: ${{ matrix.no-extensions }}
      run: |
        make vvtest
        python -m coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v1.5.2
      with:
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    needs: test
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Dummy
        run: |
            echo "Predeploy step"

  build-tarball:
    name: Tarball
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
      with:
        submodules: true
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cythonize
      run: |
        make cythonize
    - name: Make sdist
      run:
        python setup.py sdist
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

  build-linux:
    name: Linux
    strategy:
      matrix:
        pyver: [cp37-cp37m, cp38-cp38, cp39-cp39]
        arch: [x86_64, aarch64, i686, ppc64le, s390x]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_${{ matrix.arch }}
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
      with:
        submodules: true
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cythonize
      if: ${{ matrix.no-extensions == '' }}
      run: |
        make cythonize
    - name: Install tools
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} ${{ env.py }} -m pip install -U setuptools wheel
    - name: Make wheel
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} ${{ env.py }} setup.py bdist_wheel
    - name: Repair wheel wheel
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} auditwheel repair dist/*.whl --wheel-dir wheelhouse/
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: wheelhouse/*

  build-binary:
    name: Binary wheels
    strategy:
      matrix:
        pyver: [3.7, 3.8, 3.9]
        os: [macos, windows]
        arch: [x86, x64]
        exclude:
        - os: macos
          arch: x86
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4
      with:
        submodules: true
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyver }}
        architecture: ${{ matrix.arch }}
    - name: Cythonize
      if: ${{ matrix.no-extensions == '' }}
      run: |
        make cythonize
    - name: Install dependencies
      run: |
        python -m pip install -U setuptools wheel
    - name: Make wheel
      run:
        python setup.py bdist_wheel
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

  deploy:
    name: Deploy
    needs: [build-linux, build-binary, build-tarball]
    runs-on: ubuntu-latest
    steps:
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install twine
      run: |
        python -m pip install twine
    - name: Download dists
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - name: PyPI upload
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*
