name: Backport
# on:
#   pull_request_target:
#     types: [opened, closed, labeled, unlabeled, synchronize]
on:
  # push:
  #   branches:
  #     - 'master'
  #     - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
  #   tags: [ 'v*' ]
  pull_request_target:
    types: [closed]
  # pull_request_target:
  #   types: [opened, closed, labeled, unlabeled, synchronize]

jobs:
  backport:
    name: Backport Action
    runs-on: ubuntu-latest
    # not awailable for forks, skip the workflow
    # if: ${{ github.event.pull_request.head.repo.full_name == 'aio-libs/aiohttp' }}
    steps:
      - id: generate_token
        uses: tibdex/github-app-token@v1.3
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}
      - name: Backport
        uses: sqren/backport-github-action@v1.0.40
        with:
          # Required
          # Token to authenticate requests
          access_token: ${{ steps.generate_token.outputs.token }}
          # access_token: ${{ secrets.GITHUB_TOKEN }}

          # Required
          # Backport PR by adding a label
          # Example: PRs labeled with "backport-to-staging" will be backported to "staging"
          backport_label_pattern: '^backport-(.*)$'

          # Optional
          # Title for the backport PR
          # Example: [branch-a] My commit msg
          # pr_title: '[{targetBranch}] {commitMessages}'

          # Optional
          # Comma separated list of labels that will be added to the backport PR.
          # target_pr_labels: 'backport'

          # Optional
          # If no labels match the `backport_label_pattern` the backport check will fail. To bypass this for a single PR you can add a label to indicate the PR should not be backported
          skip_backport_check_label: 'backport:skip'

          # Optional
          # If no labels match the `backport_label_pattern` the backport check will fail. Enabling this will bypass the check for all PRs
          skip_backport_check: true
